io.on("connection", (socket) => {
    console.log("A user connected:", socket.id);

    // Handle user login
    socket.on("login", async (username, userId) => {
        // Prevent duplicate connections for the same userId
        if (users.has(userId)) return; // Ignore if already logged in

        console.log("User logged in:", username, userId, socket.id);

        const user = { username, id: socket.id, userId };

        // Add user to the usersOnline module
        usersOnline.addUser(user);
        users.set(userId, socket.id); // Track active user connections

        // Update user status in the database
        await User.updateOne({ _id: userId }, { $set: { online: true } });

        // Broadcast the updated user list to all clients
        io.emit("allUsers", usersOnline.getUsers());
    });

    // Handle user manually logging out (userOffline event)
    socket.on("userOffline", async (userId) => {
        console.log(`User ${userId} is logging out`);

        // Remove user from the users map
        users.forEach((socketId, uid) => {
            if (uid === userId) {
                users.delete(uid); // Remove user from the map
            }
        });

        // Remove user from the usersOnline module
        usersOnline.removeUser(socket.id);

        // Update user status in the database
        await User.updateOne({ _id: userId }, { $set: { online: false } });

        // Broadcast the updated user list to all clients
        io.emit("allUsers", usersOnline.getUsers());
    });

    // Handle user disconnect (auto logout)
    socket.on("disconnect", async () => {
        let disconnectedUserId = null;

        // Find and remove the disconnected user from the users map
        users.forEach((socketId, userId) => {
            if (socketId === socket.id) {
                disconnectedUserId = userId;
                users.delete(userId); // Remove user from the map
            }
        });

        if (disconnectedUserId) {
            console.log(`User ${disconnectedUserId} disconnected`);

            // Remove user from the usersOnline module
            usersOnline.removeUser(socket.id);

            // Update user status in the database
            await User.updateOne({ _id: disconnectedUserId }, { $set: { online: false } });

            // Broadcast the updated user list to all clients
            io.emit("allUsers", usersOnline.getUsers());
        }
    });
});


module.exports = io;